class Solution {
    public int search(int[] arr, int key) {
        int pivotIdx = pivot(arr);
        if(pivotIdx == -1){
            if(arr.length == 1 || arr[0] > arr[1]) pivotIdx = 0;
            else    pivotIdx = arr.length-1;
        }
        if(key < arr[0])    return binarySearch(pivotIdx+1,arr.length-1,arr,key);
        else    return binarySearch(0,pivotIdx,arr,key);
        
    }
    public static int pivot(int[] arr){
		int low = 1, high = arr.length-2;
        int f = arr[0];
        while(low <= high){
            int mid = low + (high-low)/2;
            if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1])  return mid;
            else if(arr[mid] > f)   low = mid + 1;
            else if(arr[mid] < f)   high = mid -1;
    	}
	    return -1;
    }
    
    public static int binarySearch(int low,  int high, int[] arr, int key){
        while(low <= high){
            int mid = low + (high-low)/2;
            if(arr[mid] == key) return mid;
            else if(arr[mid] > key)     high = mid - 1;
            else    low = mid + 1;
        }
        return -1;
    }
}
