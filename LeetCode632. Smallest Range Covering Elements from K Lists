class Solution {
    class Triplet implements Comparable<Triplet>{
        int val;
        int row;
        int col;
        Triplet(int val, int row, int col){
            this.val = val;
            this.row = row;
            this.col = col;
        }

        public int compareTo(Triplet t){
            return this.val - t.val;
        }
    }

    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Triplet> minHeap = new PriorityQueue<>();
        int max = Integer.MIN_VALUE;
        int[] range = {1,Integer.MAX_VALUE};
        for(int i = 0; i < nums.size(); i++){
            int temp = nums.get(i).get(0);
            Triplet t = new Triplet(temp, i , 0);
            minHeap.add(t);
            max = Math.max(max,temp);
        }

        while(true){
            Triplet t = minHeap.remove();
            if(Math.abs(t.val - max) < Math.abs(range[1] - range[0])){
                range[0] = t.val;
                range[1] = max;
            }
            if(t.col+1 >= nums.get(t.row).size())   break;   
            int temp = nums.get(t.row).get(t.col+1);
            minHeap.add(new Triplet(temp, t.row, t.col+1));
            max = Math.max(temp, max);
        }
        return range;
    }
}
    
