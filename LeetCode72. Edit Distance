    // public static int ops(String word1, String word2, int i, int j, int[][] memo){
    //     if(j < 0)   return i+1;
    //     if(i < 0)   return j+1;
    //     if(memo[i][j] != -1)    return memo[i][j];
    //     if(word1.charAt(i) == word2.charAt(j))  return memo[i][j] =  ops(word1,word2,i-1,j-1,memo);
    //     else{
    //         int insert = ops(word1,word2,i,j-1,memo);
    //         int delete = ops(word1,word2,i-1,j,memo);
    //         int replace = ops(word1,word2,i-1,j-1,memo);
    //         return memo[i][j] = 1 + Math.min(Math.min(insert,delete),replace);
    //     }
    // }

class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        if(m == 0 || n == 0)  return Math.max(m,n);
        int[][] dp = new int[m+1][n+1];
        for(int i = 0; i <= m; i++)  dp[i][0] = i;
        for(int i = 0; i <= n; i++)  dp[0][i] = i;
    
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1))  dp[i][j] =  dp[i-1][j-1];
                else{
                    int insert = dp[i][j-1];
                    int delete = dp[i-1][j];
                    int replace = dp[i-1][j-1];
                    dp[i][j] = 1 + Math.min(Math.min(insert,delete),replace);
                }         
            }
        }
        return dp[m][n];
    }
}
