class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        StringBuilder res = new StringBuilder("");
        int[][] dp = createDP(str1, str2);
        String lcs = printLCS(dp, str1,str2);
        int i = 0, j = 0, k = 0;
        while(i < str1.length() && j < str2.length() && k < lcs.length()){
            while(str1.charAt(i) != lcs.charAt(k))  {res.append(str1.charAt(i));    i++;}
            while(str2.charAt(j) != lcs.charAt(k))  {res.append(str2.charAt(j));    j++;}
            res.append(lcs.charAt(k));
            i++;    j++;    k++;
        }
        while(i < str1.length())  {res.append(str1.charAt(i));    i++;}
        while(j < str2.length())  {res.append(str2.charAt(j));    j++;}
        return res.toString();
    }

    private static int[][] createDP(String str1, String str2){
        int[][] dp = new int[str1.length()+1][str2.length()+1];
        for(int i = 1; i <= str1.length(); i++){
            for(int j = 1; j <= str2.length(); j++){
                if(str1.charAt(i-1) == str2.charAt(j-1))    dp[i][j] = 1 + dp[i-1][j-1];
                else    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);                
            }
        }
        return dp;
    }

    private static String printLCS(int[][] dp, String str1, String str2) {
        StringBuilder sb = new StringBuilder();
        int i = dp.length-1, j = dp[0].length-1;
        while(i > 0 && j > 0){
            if(str1.charAt(i-1) == str2.charAt(j-1)){
                    sb.append(str1.charAt(i-1));
                    i--;    j--;
                }
            else if(dp[i][j-1] >= dp[i-1][j])   j--;
            else    i--;
        }
        return sb.reverse().toString();
    }
}
