class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> l = new ArrayList<>();
        boolean[] isVisited = new boolean[nums.length];
        ways(nums,ans, l, isVisited);
        return ans;
    }

    public static void ways(int[] nums, List<List<Integer>> ans, List<Integer> l, boolean[] isVisited){
        if(nums.length == l.size()){
            ans.add(new ArrayList<>(l));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            if(!isVisited[i]){
                l.add(nums[i]);
                isVisited[i] = true;
                ways(nums,ans,l,isVisited);
                isVisited[i] = false;
                l.remove(l.size()-1);
            }
        }
    }
}
